// Generated by view binder compiler. Do not edit!
package com.plataforma.crpg.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.plataforma.crpg.R;
import com.plataforma.crpg.widgets.BorderedCircle;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.adw.library.widgets.discreteseekbar.DiscreteSeekBar;

public final class ItemBottomSheetMarkerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Barrier barrierSize;

  @NonNull
  public final AppCompatCheckBox checkboxMarkerInCenter;

  @NonNull
  public final BorderedCircle imageMarkerColor;

  @NonNull
  public final DiscreteSeekBar seekMarkerBottomPadding;

  @NonNull
  public final DiscreteSeekBar seekMarkerLeftPadding;

  @NonNull
  public final DiscreteSeekBar seekMarkerLinePadding;

  @NonNull
  public final DiscreteSeekBar seekMarkerRightPadding;

  @NonNull
  public final DiscreteSeekBar seekMarkerSize;

  @NonNull
  public final DiscreteSeekBar seekMarkerTopPadding;

  @NonNull
  public final AppCompatTextView textMarkerBottomPadding;

  @NonNull
  public final AppCompatTextView textMarkerColor;

  @NonNull
  public final AppCompatTextView textMarkerDrawable;

  @NonNull
  public final AppCompatTextView textMarkerHeading;

  @NonNull
  public final AppCompatTextView textMarkerInCenter;

  @NonNull
  public final AppCompatTextView textMarkerLeftPadding;

  @NonNull
  public final AppCompatTextView textMarkerLinePadding;

  @NonNull
  public final AppCompatTextView textMarkerPaddingNote;

  @NonNull
  public final AppCompatTextView textMarkerRightPadding;

  @NonNull
  public final AppCompatTextView textMarkerSize;

  @NonNull
  public final AppCompatTextView textMarkerTopPadding;

  private ItemBottomSheetMarkerBinding(@NonNull ConstraintLayout rootView,
      @NonNull Barrier barrierSize, @NonNull AppCompatCheckBox checkboxMarkerInCenter,
      @NonNull BorderedCircle imageMarkerColor, @NonNull DiscreteSeekBar seekMarkerBottomPadding,
      @NonNull DiscreteSeekBar seekMarkerLeftPadding,
      @NonNull DiscreteSeekBar seekMarkerLinePadding,
      @NonNull DiscreteSeekBar seekMarkerRightPadding, @NonNull DiscreteSeekBar seekMarkerSize,
      @NonNull DiscreteSeekBar seekMarkerTopPadding,
      @NonNull AppCompatTextView textMarkerBottomPadding,
      @NonNull AppCompatTextView textMarkerColor, @NonNull AppCompatTextView textMarkerDrawable,
      @NonNull AppCompatTextView textMarkerHeading, @NonNull AppCompatTextView textMarkerInCenter,
      @NonNull AppCompatTextView textMarkerLeftPadding,
      @NonNull AppCompatTextView textMarkerLinePadding,
      @NonNull AppCompatTextView textMarkerPaddingNote,
      @NonNull AppCompatTextView textMarkerRightPadding, @NonNull AppCompatTextView textMarkerSize,
      @NonNull AppCompatTextView textMarkerTopPadding) {
    this.rootView = rootView;
    this.barrierSize = barrierSize;
    this.checkboxMarkerInCenter = checkboxMarkerInCenter;
    this.imageMarkerColor = imageMarkerColor;
    this.seekMarkerBottomPadding = seekMarkerBottomPadding;
    this.seekMarkerLeftPadding = seekMarkerLeftPadding;
    this.seekMarkerLinePadding = seekMarkerLinePadding;
    this.seekMarkerRightPadding = seekMarkerRightPadding;
    this.seekMarkerSize = seekMarkerSize;
    this.seekMarkerTopPadding = seekMarkerTopPadding;
    this.textMarkerBottomPadding = textMarkerBottomPadding;
    this.textMarkerColor = textMarkerColor;
    this.textMarkerDrawable = textMarkerDrawable;
    this.textMarkerHeading = textMarkerHeading;
    this.textMarkerInCenter = textMarkerInCenter;
    this.textMarkerLeftPadding = textMarkerLeftPadding;
    this.textMarkerLinePadding = textMarkerLinePadding;
    this.textMarkerPaddingNote = textMarkerPaddingNote;
    this.textMarkerRightPadding = textMarkerRightPadding;
    this.textMarkerSize = textMarkerSize;
    this.textMarkerTopPadding = textMarkerTopPadding;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBottomSheetMarkerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBottomSheetMarkerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_bottom_sheet_marker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBottomSheetMarkerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      Barrier barrierSize = rootView.findViewById(R.id.barrier_size);
      if (barrierSize == null) {
        missingId = "barrierSize";
        break missingId;
      }
      AppCompatCheckBox checkboxMarkerInCenter = rootView.findViewById(R.id.checkbox_marker_in_center);
      if (checkboxMarkerInCenter == null) {
        missingId = "checkboxMarkerInCenter";
        break missingId;
      }
      BorderedCircle imageMarkerColor = rootView.findViewById(R.id.image_marker_color);
      if (imageMarkerColor == null) {
        missingId = "imageMarkerColor";
        break missingId;
      }
      DiscreteSeekBar seekMarkerBottomPadding = rootView.findViewById(R.id.seek_marker_bottom_padding);
      if (seekMarkerBottomPadding == null) {
        missingId = "seekMarkerBottomPadding";
        break missingId;
      }
      DiscreteSeekBar seekMarkerLeftPadding = rootView.findViewById(R.id.seek_marker_left_padding);
      if (seekMarkerLeftPadding == null) {
        missingId = "seekMarkerLeftPadding";
        break missingId;
      }
      DiscreteSeekBar seekMarkerLinePadding = rootView.findViewById(R.id.seek_marker_line_padding);
      if (seekMarkerLinePadding == null) {
        missingId = "seekMarkerLinePadding";
        break missingId;
      }
      DiscreteSeekBar seekMarkerRightPadding = rootView.findViewById(R.id.seek_marker_right_padding);
      if (seekMarkerRightPadding == null) {
        missingId = "seekMarkerRightPadding";
        break missingId;
      }
      DiscreteSeekBar seekMarkerSize = rootView.findViewById(R.id.seek_marker_size);
      if (seekMarkerSize == null) {
        missingId = "seekMarkerSize";
        break missingId;
      }
      DiscreteSeekBar seekMarkerTopPadding = rootView.findViewById(R.id.seek_marker_top_padding);
      if (seekMarkerTopPadding == null) {
        missingId = "seekMarkerTopPadding";
        break missingId;
      }
      AppCompatTextView textMarkerBottomPadding = rootView.findViewById(R.id.text_marker_bottom_padding);
      if (textMarkerBottomPadding == null) {
        missingId = "textMarkerBottomPadding";
        break missingId;
      }
      AppCompatTextView textMarkerColor = rootView.findViewById(R.id.text_marker_color);
      if (textMarkerColor == null) {
        missingId = "textMarkerColor";
        break missingId;
      }
      AppCompatTextView textMarkerDrawable = rootView.findViewById(R.id.text_marker_drawable);
      if (textMarkerDrawable == null) {
        missingId = "textMarkerDrawable";
        break missingId;
      }
      AppCompatTextView textMarkerHeading = rootView.findViewById(R.id.text_marker_heading);
      if (textMarkerHeading == null) {
        missingId = "textMarkerHeading";
        break missingId;
      }
      AppCompatTextView textMarkerInCenter = rootView.findViewById(R.id.text_marker_in_center);
      if (textMarkerInCenter == null) {
        missingId = "textMarkerInCenter";
        break missingId;
      }
      AppCompatTextView textMarkerLeftPadding = rootView.findViewById(R.id.text_marker_left_padding);
      if (textMarkerLeftPadding == null) {
        missingId = "textMarkerLeftPadding";
        break missingId;
      }
      AppCompatTextView textMarkerLinePadding = rootView.findViewById(R.id.text_marker_line_padding);
      if (textMarkerLinePadding == null) {
        missingId = "textMarkerLinePadding";
        break missingId;
      }
      AppCompatTextView textMarkerPaddingNote = rootView.findViewById(R.id.text_marker_padding_note);
      if (textMarkerPaddingNote == null) {
        missingId = "textMarkerPaddingNote";
        break missingId;
      }
      AppCompatTextView textMarkerRightPadding = rootView.findViewById(R.id.text_marker_right_padding);
      if (textMarkerRightPadding == null) {
        missingId = "textMarkerRightPadding";
        break missingId;
      }
      AppCompatTextView textMarkerSize = rootView.findViewById(R.id.text_marker_size);
      if (textMarkerSize == null) {
        missingId = "textMarkerSize";
        break missingId;
      }
      AppCompatTextView textMarkerTopPadding = rootView.findViewById(R.id.text_marker_top_padding);
      if (textMarkerTopPadding == null) {
        missingId = "textMarkerTopPadding";
        break missingId;
      }
      return new ItemBottomSheetMarkerBinding((ConstraintLayout) rootView, barrierSize,
          checkboxMarkerInCenter, imageMarkerColor, seekMarkerBottomPadding, seekMarkerLeftPadding,
          seekMarkerLinePadding, seekMarkerRightPadding, seekMarkerSize, seekMarkerTopPadding,
          textMarkerBottomPadding, textMarkerColor, textMarkerDrawable, textMarkerHeading,
          textMarkerInCenter, textMarkerLeftPadding, textMarkerLinePadding, textMarkerPaddingNote,
          textMarkerRightPadding, textMarkerSize, textMarkerTopPadding);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
